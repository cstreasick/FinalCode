// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5247.TestDrive.commands;
import edu.wpi.first.wpilibj.command.Command;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Scheduler;

import org.usfirst.frc5247.TestDrive.OI;
import org.usfirst.frc5247.TestDrive.Robot;
import org.usfirst.frc5247.TestDrive.subsystems.Subsystem1;
//import org.usfirst.frc5247.TestDrive.subsystems.Subsystem2;
//import org.usfirst.frc5247.TestDrive.subsystems.Subsystem2;
//import org.usfirst.frc5247.TestDrive.subsystems.FirstSubsystem;

/**
 *
 */
public class DriveCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveCommand() {
    	
        requires(Robot.subsystem1);
      //  requires(Robot.subsystem2);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }
    
    	
    
    public void teleopPeriodic() {
        Scheduler.getInstance().run();	
    }
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	
		double moveValue = 0 - Robot.oi.driveStick.getY();
		double rotateValue = 0 + Robot.oi.driveStick.getX();
		Robot.subsystem1.driveMe(-moveValue, - rotateValue);
        
        double speed = Robot.oi.opStick.getRawAxis(1);
        //Robot.subsystem1.reelUpTop.set(speed * .2);
        Robot.subsystem1.reelUpBottom.set(speed * .5);
        //Robot.subsystem1.reelUpBottom.set(speed);
        
        double rotateArm = Robot.oi.opStick.getRawAxis(0);
        Robot.subsystem1.rotateMotor.set(rotateArm);

        

        if(Robot.oi.opStick.getRawButtonPressed(12)) Robot.subsystem1.backMotor.set(.8);
        //  if(Robot.oi.opStick.getRawButtonPressed(12)) Robot.motors.thrustsBackMotors();
        if(Robot.oi.opStick.getRawButtonReleased(12)) Robot.subsystem1.backMotor.set(0);
        if(Robot.oi.opStick.getRawButtonPressed(11)) Robot.subsystem1.backMotor.set(-.6);
        if(Robot.oi.opStick.getRawButtonReleased(11)) Robot.subsystem1.backMotor.set(0);
        //if(Robot.oi.opStick.getRawButtonPressed(11)) Robot.motors.inwardBackMotors();
        if(Robot.oi.driveStick.getRawButtonPressed(3)) Robot.subsystem1.backDrive.set(.2);
        if(Robot.oi.driveStick.getRawButtonReleased(3)) Robot.subsystem1.backDrive.set(0);
        if(Robot.oi.driveStick.getRawButtonPressed(4)) Robot.subsystem1.backDrive.set(-.2);
        if(Robot.oi.driveStick.getRawButtonReleased(4)) Robot.subsystem1.backDrive.set(0);


        // if(Robot.oi.opStick.getRawButtonPressed(7)) Robot.subsystem1.CastorL.set(.5);
        // if(Robot.oi.opStick.getRawButtonReleased(7)) Robot.subsystem1.CastorL.set(0);
        // if(Robot.oi.opStick.getRawButtonPressed(9)) Robot.subsystem1.CastorL.set(-.5);
        // if(Robot.oi.opStick.getRawButtonReleased(9)) Robot.subsystem1.CastorL.set(0);
        
        if(Robot.oi.opStick.getRawButtonPressed(10)) Robot.subsystem1.CastorR.set(.5);
        if(Robot.oi.opStick.getRawButtonReleased(10)) Robot.subsystem1.CastorR.set(0);
        if(Robot.oi.opStick.getRawButtonPressed(8)) Robot.subsystem1.CastorR.set(-.5);
        if(Robot.oi.opStick.getRawButtonReleased(8)) Robot.subsystem1.CastorR.set(0);
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.subsystem1.stopMe();
    	//Robot.subsystem1.stopMet();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	//Robot.subsystem1.stopMe();
    }
}
