// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5247.TestDrive;

import org.usfirst.frc5247.TestDrive.commands.*;

//import org.usfirst.frc5247.TestDrive.commands.FirstCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
// import org.usfirst.frc5247.TestDrive.subsystems.DriveShifter;
// import org.usfirst.frc5247.TestDrive.subsystems.Solenoids;
// import org.usfirst.frc5247.TestDrive.subsystems.ThirdSolenoids;
// import org.usfirst.frc5247.TestDrive.subsystems.SolenoidGroup0;



//import org.usfirst.frc5247.TestDrive.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    JoystickButton leftLED;
    JoystickButton rightLED;
    JoystickButton leftSpin;
    JoystickButton rightSpin;
    JoystickButton rightFaster;
    JoystickButton LeftFaster;
    JoystickButton driverJoystickButton1;
    JoystickButton solenoid;
    

    //JoystickButton leftRevLED;
    JoystickButton rightRevLED;
    Button SolenoidGroup;
    Button SolenoidGroupF;
    Button NextSolenoidGroup;
    Button LastSolenoidGroup;
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Joystick driveStick;
    public static Joystick opStick;
    //Relay spike = new Relay(4, 1);
    //Solenoid SolenoidTwo;
  
    //Button motorTwo;
    
    
 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS'
        driveStick = new Joystick(0);
        opStick = new Joystick(1);
        
        driverJoystickButton1 = new JoystickButton(driveStick, 1);
        // driverJoystickButton1.whenPressed(new SolenoidTrue());
        // //solenoid = new JoystickButton(driveStick, 2);
        // SolenoidGroup = new JoystickButton(opStick, 11);
        // SolenoidGroup.whenPressed(new DSolenoid1False());

        // SolenoidGroupF = new JoystickButton(opStick, 12);
        // SolenoidGroupF.whenPressed(new DSolenoid1True());

        //SolenoidGroup = new JoystickButton(opStick, 11);
       // SolenoidGroup.whenPressed(new DSolenoid1False());

        //SolenoidGroup = new JoystickButton(opStick, 11);
        //SolenoidGroup.whenPressed(new DSolenoid1False());
        /* SolenoidGroup = new JoystickButton(opStick, 11);
        SolenoidGroup.whenPressed(new DriveShifter());

        NextSolenoidGroup = new JoystickButton(opStick, 9);
        NextSolenoidGroup.whenPressed(new Solenoids());
        //driverJoystickButton1.whileActive(new DriveShifter(true));
       // driverJoystickButton1.whenInactive(new DriveShifter(false));
        LastSolenoidGroup = new JoystickButton(opStick, 7);
        LastSolenoidGroup.whenPressed(new ThirdSolenoids());  */

        leftSpin = new JoystickButton(driveStick, 4);
       // leftSpin.whileHeld(new SpinCommand());
        leftSpin.whenReleased(new SpinStop());

        

        rightSpin = new JoystickButton(driveStick, 3);
        rightSpin.whileHeld(new SpinRight());
        rightSpin.whenReleased(new SpinStop());

        rightFaster = new JoystickButton(driveStick, 7);
        rightFaster.whileHeld(new SpinRightFaster());
        rightFaster.whenReleased(new SpinStop());

         LeftFaster = new JoystickButton(driveStick, 8);
        LeftFaster.whileHeld(new SpinCommandFaster());
        LeftFaster.whenReleased(new SpinStop());
        //leftRevLED = new JoystickButton(driveStick, 4);
        //leftRevLED.whileHeld(new LEDLRev());

        //rightRevLED = new JoystickButton(driveStick, 3);
        //rightRevLED.whileHeld(new LEDRRev());
       
    	
    	//motorTwo.whenPressed(new SecondCommand());
    	
      //  if(opStick.getRawButton(1)) {
 
        // SmartDashboard Buttons
        //SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Test Auton", new TestAuton());
       // SmartDashboard.putData("DriveCommand", new DriveCommand());
        //SmartDashboard.putData("Climb Motor", new FirstCommand());
      

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

  

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick() {
        return driveStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

